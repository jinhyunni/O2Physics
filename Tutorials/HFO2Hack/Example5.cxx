// Make <pT> vs V0M multiplicity table
// V0M Multiplicity table is not a default table provided,
// but has to be generated by running 'o2-analysis-Multiplicity-table' analysis task.
// This task generated aod::Mults table that can be joined with Collisions table.

// Subscribing to joined table can be done by the following way:
// void(...soa::Join<table1, table2>::iterator...)

#include "Framework/AnalysisTask.h"
#include "Framework/runDataProcessing.h"
#include "Common/DataModel/Multiplicity.h"

using namespace o2;
using namespace o2::framework;
using namespace o2::framework::expressions;

struct Example5{
	
	// Define Histogram registry
	HistogramRegistry registry{"histos", {}};

	// Define AxisSpecs
	AxisSpec eta{60, -3, 3};
	AxisSpec pT{101, -0.05, 10.05};
	AxisSpec avgpT{101, -0.05, 2.05};
	AxisSpec v0mMult{201, -0.5, 200.5};

	// Add Filter
	Configurable<float> etaCut{"etaCut", 0.8, "Eta cut"};
	Filter etaFilter = (aod::track::eta >= -etaCut) and (aod::track::eta <= etaCut);

	void init(InitContext const&)
	{
		registry.add("h1eta", "x: eta", {HistType::kTH1F, {eta}});
		registry.add("h1pT", "x: pT", {HistType::kTH1F, {pT}});
		registry.add("h2pTv0mMult", "x: pT, y: vom Mult", {HistType::kTH2F, {pT, v0mMult}});
		registry.add("h2avgpTv0mMult", "x: avgpT, y: vom Mult", {HistType::kTH2F, {avgpT, v0mMult}});
	}

	// Subscribing to filtered & Joined table
	void process(
			soa::Join<aod::Collisions, aod::Mults>::iterator const& collision, 
			soa::Filtered<aod::Tracks> const& tracks)
	{
		
		float avgpT = 0.;
		
		// Calculate pT sum, and fill pT and eta histogram
		for( auto const& track : tracks )
		{
			avgpT += track.pt();
			registry.fill(HIST("h2pTv0mMult"), track.pt(), collision.multFV0M());
			registry.fill(HIST("h1pT"), track.pt());
			registry.fill(HIST("h1eta"), track.eta());
		}
		
		// Calculate avgpT per event
		if( tracks.size() != 0)
		{
			avgpT /= tracks.size();
		}

		// Fill h2 histogram
		registry.fill(HIST("h2avgpTv0mMult"), avgpT, collision.multFV0M());
	}
};

WorkflowSpec defineDataProcessing(ConfigContext const& cfgc)
{
	return WorkflowSpec
	{
		adaptAnalysisTask<Example5>(cfgc)
	};
}
